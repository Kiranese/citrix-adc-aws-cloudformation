---
Description: "Creates a HA pair with two instance of Citrix BYOL ADC with 3 ENIs 
associated to 3 VPC subnets (Management, Client, Server) on primary and 1 ENI 
for Management in secondary in the same availability zone."

Parameters:
  pCitrixADCImageID:
    Type: String
    Default: ""
    Description: >-
      "AMI ID of Citrix ADC (13.0.41.x+) to be provisioned. 
      If left empty, "Citrix ADC VPX - Customer Licensed Version 13.0-41.20
      (https://aws.amazon.com/marketplace/pp/B00AA01BOE)" is provisioned by default"
  pSSHCidrIp:
    Type: String
    MinLength: 9
    MaxLength: 18
    Description: "The IP address range that can SSH to the EC2 instance (port: 22)."
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  pHTTPCidrIp:
    Default: 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    Description: "The IP address range that can HTTP to the EC2 instance (port: 80)."
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  pHTTPSCidrIp:
    Default: 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    Description: "The IP address range that can HTTPS to the EC2 instance (port: 443)."
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID of your existing Virtual Private Cloud (VPC)
  pManagementSubnet:
    Type: AWS::EC2::Subnet::Id
    Description:
      SubnetId of an existing subnet in your Virtual Private Cloud (VPC)
      dedicated for management IP
  pClientSubnet:
    Type: AWS::EC2::Subnet::Id
    Description:
      SubnetId of an existing subnet in your Virtual Private Cloud (VPC)
      dedicated for Client side
  pServerSubnet:
    Type: AWS::EC2::Subnet::Id
    Description:
      SubnetId of an existing subnet in your Virtual Private Cloud (VPC)
      dedicated for Server side.
  pInstanceType:
    Default: m4.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
    Type: String
    Description: Type of Citrix ADC instance
    AllowedValues:
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
  pKeyName:
    ConstraintDescription:
      Can contain only alphanumeric characters, spaces, dashes
      and underscores.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    MinLength: 1
    AllowedPattern: "[-_ a-zA-Z0-9]*"
    MaxLength: 64
    Type: AWS::EC2::KeyPair::KeyName
  pTenancyType:
    Default: default
    Type: String
    Description: Tenancy Model
    AllowedValues:
      - default
      - dedicated
  pPublishCloudwatchMetrics:
    Default: "Yes"
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Description:
      Enter "Yes" to enable publishing of VPX metrics to Cloudwatch, or
      "No" to disable publishing.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Citrix ADC Image
        Parameters:
          - pCitrixADCImageID
      - Label:
          default: Virtual Private Network Configuration
        Parameters:
          - pVpcId
          - pSSHCidrIp
          - pHTTPCidrIp
          - pHTTPSCidrIp
      - Label:
          default: Network Interface Configuration
        Parameters:
          - pManagementSubnet
          - pClientSubnet
          - pServerSubnet

      - Label:
          default: Instance Configuration
        Parameters:
          - pKeyName
          - pInstanceType
          - pTenancyType
          - pPublishCloudwatchMetrics

    ParameterLabels:
      pCitrixADCImageID:
        default: Citrix ADC AMI ID

      pVpcId:
        default: VPC ID*
      pSSHCidrIp:
        default: Remote SSH CIDR IP*
      pHTTPCidrIp:
        default: Remote HTTP CIDR IP*
      pHTTPSCidrIp:
        default: Remote HTTPS CIDR IP*
      pManagementSubnet:
        default: Management Subnetwork*
      pClientSubnet:
        default: Client Subnetwork*
      pServerSubnet:
        default: Server Subnetwork*
      pKeyName:
        default: Key Pair*
      pInstanceType:
        default: Instance Type*
      pTenancyType:
        default: Tenancy Model*
      pPublishCloudwatchMetrics:
        default: Enable publishing custom metrics to cloudwatch?*

AWSTemplateFormatVersion: 2010-09-09

Outputs:
  DummyIPs:
    Description: DO NOT use these IPs
    Value: !Join
      - ", "
      - - !GetAtt rPriClientENI.PrimaryPrivateIpAddress
        - !GetAtt rPriServerENI.PrimaryPrivateIpAddress
        - !GetAtt rSecClientENI.PrimaryPrivateIpAddress
        - !GetAtt rSecServerENI.PrimaryPrivateIpAddress
  PrimaryPublicNSIP:
    Description: Primary CitrixADC EIP associated with Management
    Value: !Ref rPriEipNsip
  PrimaryADCInstanceID:
    Description: Primary Citrix ADC instance ID
    Value: !Ref rPriVPXInstance
  PrimaryPrivateVIPs:
    Description: Primary Client side Private VIPs
    Value: !Join
      - ", "
      - !GetAtt rPriClientENI.SecondaryPrivateIpAddresses
  PrimaryPrivateSNIPs:
    Description: Primary Server side Private SNIPs
    Value: !Join
      - ", "
      - !GetAtt rPriServerENI.SecondaryPrivateIpAddresses

  SecondaryPublicNSIP:
    Description: Secondary CitrixADC EIP associated with Management
    Value: !Ref rEipSecNsip
  SecondaryADCInstanceID:
    Description: Primary Citrix ADC instance ID
    Value: !Ref rSecVPXInstance

Conditions:
  cUseCitrixADCImageID: !Not
    - !Equals
      - !Ref pCitrixADCImageID
      - ""

Resources:
  rSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Enable SSH access via port 22, HTTP with port 80 and HTTPS
        with port 443
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pSSHCidrIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pHTTPCidrIp
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pHTTPSCidrIp
  rInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt rSecurityGroup.GroupId
      GroupId: !GetAtt rSecurityGroup.GroupId
  rCitrixNodesInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
        - PolicyName: Citrixnode
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DetachNetworkInterface
                  - ec2:AttachNetworkInterface
                  - ec2:UnassignPrivateIpAddresses
                  - ec2:AssignPrivateIpAddresses
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:RebootInstances
                  - "autoscaling:*"
                  - "sns:*"
                  - "sqs:*"
                  - "iam:SimulatePrincipalPolicy"
                  - "iam:GetRole"
                Resource: "*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
  rCitrixNodesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref rCitrixNodesInstanceRole

  rPriNsipENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref pManagementSubnet
      GroupSet:
        - !Ref rSecurityGroup
      Description: ENI connected to Primary Management Subnet
      PrivateIpAddress: !Ref AWS::NoValue
  rPriClientENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref pClientSubnet
      GroupSet:
        - !Ref rSecurityGroup
      Description: ENI connected to Primary Client Subnet
      PrivateIpAddress: !Ref AWS::NoValue
      SecondaryPrivateIpAddressCount: 1 # This secondary IP migrates after failover
  rPriServerENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref pServerSubnet
      GroupSet:
        - !Ref rSecurityGroup
      Description: ENI connected to Primary Server Subnet
      PrivateIpAddress: !Ref AWS::NoValue
      SecondaryPrivateIpAddressCount: 1 # This secondary IP migrates after failover
  rPriEipNsip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rAssociateEipNsip:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref rPriNsipENI
      AllocationId: !GetAtt rPriEipNsip.AllocationId
  rPriEipClientIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rAssociateEipClientIP:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref rPriClientENI
      PrivateIpAddress: !Select
        - 0
        - !GetAtt rPriClientENI.SecondaryPrivateIpAddresses # Associate EIP-VIP to first Secondary IP of Client ENI
      AllocationId: !GetAtt rPriEipClientIP.AllocationId

  rPriVPXInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: Primary-CitrixADC
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - Fn::Join:
                  - ""
                  - - HAPeerIP=
                    - !GetAtt rSecNsipENI.PrimaryPrivateIpAddress
              - Fn::Join:
                  - ""
                  - - PublishCloudwatchMetrics=
                    - !Ref pPublishCloudwatchMetrics
              - !Ref rMyWaitHandle
      ImageId: !If
        - cUseCitrixADCImageID
        - !Ref pCitrixADCImageID
        - !FindInMap
          - AWSRegionArch2AMI
          - !Ref AWS::Region
          - !FindInMap
            - AWSInstanceType2Arch
            - !Ref pInstanceType
            - Arch
      KeyName: !Ref pKeyName
      Tenancy: !Ref pTenancyType
      IamInstanceProfile: !Ref rCitrixNodesProfile
      InstanceType: !Ref pInstanceType
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref rPriNsipENI
        - DeviceIndex: 1
          NetworkInterfaceId: !Ref rPriClientENI
        - DeviceIndex: 2
          NetworkInterfaceId: !Ref rPriServerENI

  rMyWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  myWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: rPriVPXInstance
    Properties:
      Count: 0
      Handle: !Ref rMyWaitHandle
      Timeout: 60

  rSecNsipENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref pManagementSubnet
      GroupSet:
        - !Ref rSecurityGroup
      Description: ENI connected to Secondary Management Subnet
      PrivateIpAddress: !Ref AWS::NoValue
  rSecClientENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref pClientSubnet
      GroupSet:
        - !Ref rSecurityGroup
      Description: ENI connected to Secondary Client Subnet
      PrivateIpAddress: !Ref AWS::NoValue
  rSecServerENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref pServerSubnet
      GroupSet:
        - !Ref rSecurityGroup
      Description: ENI connected to Secondary Server Subnet
      PrivateIpAddress: !Ref AWS::NoValue
  rEipSecNsip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rAssociateEipSecNsip:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref rSecNsipENI
      AllocationId: !GetAtt rEipSecNsip.AllocationId

  rSecVPXInstance:
    DependsOn: myWaitCondition
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: Secondary-CitrixADC
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - Fn::Join:
                  - ""
                  - - HAPeerIP=
                    - !GetAtt rPriNsipENI.PrimaryPrivateIpAddress
              - Fn::Join:
                  - ""
                  - - HAPeerInstanceId=
                    - !Ref rPriVPXInstance
              - Fn::Join:
                  - ""
                  - - PublishCloudwatchMetrics=
                    - !Ref pPublishCloudwatchMetrics
              - !Ref rMyWaitHandle
      ImageId: !If
        - cUseCitrixADCImageID
        - !Ref pCitrixADCImageID
        - !FindInMap
          - AWSRegionArch2AMI
          - !Ref AWS::Region
          - !FindInMap
            - AWSInstanceType2Arch
            - !Ref pInstanceType
            - Arch
      KeyName: !Ref pKeyName
      Tenancy: !Ref pTenancyType
      IamInstanceProfile: !Ref rCitrixNodesProfile
      InstanceType: !Ref pInstanceType
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref rSecNsipENI
        - DeviceIndex: 1
          NetworkInterfaceId: !Ref rSecClientENI
        - DeviceIndex: 2
          NetworkInterfaceId: !Ref rSecServerENI

Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-0f38778279d15e095
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    us-east-2:
      "32": NOT_YET_SUPPORTED
      "64": ami-08e851d5af412cb1a
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    us-west-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-031421c73dff0724c
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    us-west-2:
      "32": NOT_YET_SUPPORTED
      "64": ami-0b4676c09e7994cf3
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    us-gov-west-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-77beeb16
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    ca-central-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-03975d4e197a28cec
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    eu-central-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-097304b6b661019e8
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    eu-west-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-07ea2ac00d82b1f3d
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    eu-west-2:
      "32": NOT_YET_SUPPORTED
      "64": ami-049deb2b212e81285
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    ap-southeast-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-05b6b9a7bbd2f4643
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    ap-southeast-2:
      "32": NOT_YET_SUPPORTED
      "64": ami-00d96537071f8f219
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    ap-south-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-05bda76bec67ae3e1
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    ap-northeast-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-03b3dcc43a36bf388
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    ap-northeast-2:
      "32": NOT_YET_SUPPORTED
      "64": ami-067a7d4b44ea1f8c8
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
    sa-east-1:
      "32": NOT_YET_SUPPORTED
      "64": ami-0220bf855f9c4b3e2
      64Cluster: NOT_YET_SUPPORTED
      64GPU: NOT_YET_SUPPORTED
  AWSInstanceType2Arch:
    m4.large:
      Arch: "64"
    m4.2xlarge:
      Arch: "64"
    m4.xlarge:
      Arch: "64"
    m4.4xlarge:
      Arch: "64"
    m4.10xlarge:
      Arch: "64"
    c4.large:
      Arch: "64"
    c4.xlarge:
      Arch: "64"
    c4.2xlarge:
      Arch: "64"
    c4.4xlarge:
      Arch: "64"
    c4.8xlarge:
      Arch: "64"
